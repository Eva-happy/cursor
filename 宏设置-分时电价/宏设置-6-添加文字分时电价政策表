Option Explicit

' 添加常量定义
Private Const PEAK As Integer = 1     ' 尖峰
Private Const HIGH As Integer = 2     ' 高峰
Private Const NORMAL As Integer = 3   ' 平段
Private Const LOW As Integer = 4      ' 低谷

' 首先定义所有辅助函数
Private Function GetStandardizedMonths(season As String, monthText As String) As String
    Dim result As String
    
    ' 如果是春秋季，需要根据月份判断是春季还是秋季
    If season = "春秋季" Then
        Dim months() As String
        months = Split(monthText, "、")
        Dim monthList As String
        monthList = ""
        
        Dim i As Long
        For i = 0 To UBound(months)
            If InStr(months(i), "-") > 0 Then
                Dim monthRange() As String
                monthRange = Split(months(i), "-")
                Dim startMonth As Long, endMonth As Long
                
                ' 确保转换成功
                On Error Resume Next
                startMonth = CLng(Trim(monthRange(0)))
                endMonth = CLng(Trim(monthRange(1)))
                On Error GoTo 0
                
                ' 处理每个月份
                Dim m As Long
                For m = startMonth To endMonth
                    If m >= 3 And m <= 6 Then
                        If monthList <> "" Then monthList = monthList & "、"
                        monthList = monthList & CStr(m)
                    End If
                Next m
            Else
                Dim currentMonth As Long
                ' 确保转换成功
                On Error Resume Next
                currentMonth = CLng(Trim(months(i)))
                On Error GoTo 0
                
                If currentMonth >= 3 And currentMonth <= 6 Then
                    If monthList <> "" Then monthList = monthList & "、"
                    monthList = monthList & CStr(currentMonth)
                End If
            End If
        Next i
        
        If monthList <> "" Then
            result = monthList
        End If
    ElseIf season = "夏季" Then
        result = "7、8、9"
    ElseIf season = "冬季" Then
        result = "12、1、2"
    End If
    
    GetStandardizedMonths = result
End Function

Private Function GetSeasonByMonth(monthNum As Integer) As String
    If monthNum >= 3 And monthNum <= 6 Then
        GetSeasonByMonth = "春季"
    ElseIf monthNum >= 7 And monthNum <= 9 Then
        GetSeasonByMonth = "夏季"
    ElseIf monthNum >= 10 And monthNum <= 11 Then
        GetSeasonByMonth = "秋季"
    Else
        GetSeasonByMonth = "冬季"
    End If
End Function

Private Function ExtractMonths(text As String) As String
    Dim result As String
    Dim start As Long
    Dim finish As Long
    
    ' 如果是冬季，直接返回冬季月份
    If InStr(text, "冬季") > 0 Then
        ExtractMonths = "12、1、2"
        Exit Function
    End If
    
    ' 提取括号中的月份信息
    start = InStr(text, "(")
    If start = 0 Then start = InStr(text, "（")
    
    finish = InStr(text, ")")
    If finish = 0 Then finish = InStr(text, "）")
    
    If start > 0 And finish > 0 Then
        result = Mid(text, start + 1, finish - start - 1)
        ' 移除"月"字
        result = Replace(result, "月", "")
    End If
    
    ExtractMonths = result
End Function

Private Function ExtractTimePairs(text As String) As String()
    Dim timeStr As String
    Dim pos As Long
    
    ' 提取冒号后的时间信息
    pos = InStr(text, "：")
    If pos = 0 Then pos = InStr(text, ":")
    
    If pos > 0 Then
        timeStr = Mid(text, pos + 1)
        timeStr = Trim(timeStr)  ' 添加去除首尾空格
        
        ' 替换中文顿号、逗号和分号
        timeStr = Replace(timeStr, "、", ",")
        timeStr = Replace(timeStr, "，", ",")
        timeStr = Replace(timeStr, "；", ",")
        timeStr = Replace(timeStr, ";", ",")
        
        ' 处理括号中的说明文字
        Dim bracketStart As Long, bracketEnd As Long
        bracketStart = InStr(timeStr, "（")
        If bracketStart > 0 Then
            bracketEnd = InStr(bracketStart, timeStr, "）")
            If bracketEnd > 0 Then
                timeStr = Left(timeStr, bracketStart - 1) & Mid(timeStr, bracketEnd + 1)
            End If
        End If
        
        ' 去除多余的空格
        timeStr = Replace(timeStr, " ", "")
        
        ' 分割多个时间段
        Dim timeParts() As String
        timeParts = Split(timeStr, ",")
        
        ' 计算有效的时间段对数
        Dim validPairs As Long
        validPairs = 0
        Dim i As Long
        
        ' 先统计有效时间对的数量
        For i = 0 To UBound(timeParts)
            Dim currentPart As String
            currentPart = Trim(timeParts(i))
            If currentPart <> "" Then
                If InStr(currentPart, "-") > 0 Then
                    ' 检查是否是跨天时间段
                    If InStr(currentPart, "次日") > 0 Then
                        validPairs = validPairs + 2  ' 跨天时间段会被拆分为两个时间段
                    Else
                        validPairs = validPairs + 1
                    End If
                ElseIf InStr(currentPart, "至") > 0 Then
                    validPairs = validPairs + 1
                End If
            End If
        Next i
        
        If validPairs > 0 Then
            Dim result() As String
            ReDim result((validPairs * 2) - 1)
            
            Dim resultIndex As Long
            resultIndex = 0
            
            ' 处理每个时间段
            For i = 0 To UBound(timeParts)
                Dim currentTime As String
                currentTime = Trim(timeParts(i))
                
                If currentTime <> "" Then
                    Dim timePair() As String
                    If InStr(currentTime, "-") > 0 Then
                        timePair = Split(currentTime, "-")
                    ElseIf InStr(currentTime, "至") > 0 Then
                        timePair = Split(currentTime, "至")
                    End If
                    
                    If UBound(timePair) = 1 Then
                        ' 检查是否是跨天时间段
                        If InStr(timePair(1), "次日") > 0 Then
                            ' 处理第一段时间（当天部分）
                            result(resultIndex) = StandardizeTime(AddTimeFormat(Trim(timePair(0))))
                            result(resultIndex + 1) = "24:00"
                            resultIndex = resultIndex + 2
                            
                            ' 处理第二段时间（次日部分）
                            result(resultIndex) = "00:00"
                            result(resultIndex + 1) = StandardizeTime(AddTimeFormat(Trim(Replace(timePair(1), "次日", ""))))
                            resultIndex = resultIndex + 2
                        Else
                            ' 处理普通时间段
                            Dim startTimeStr As String, endTimeStr As String
                            startTimeStr = Trim(timePair(0))
                            endTimeStr = Trim(timePair(1))
                            
                            ' 确保时间格式正确
                            If IsNumeric(startTimeStr) Then startTimeStr = startTimeStr & ":00"
                            If IsNumeric(endTimeStr) Then endTimeStr = endTimeStr & ":00"
                            
                            result(resultIndex) = StandardizeTime(startTimeStr)
                            result(resultIndex + 1) = StandardizeTime(endTimeStr)
                            resultIndex = resultIndex + 2
                        End If
                    End If
                End If
            Next i
            
            ExtractTimePairs = result
        End If
    End If
End Function

Private Function AddTimeFormat(timeStr As String) As String
    ' 如果时间字符串只包含数字，添加":00"
    If IsNumeric(timeStr) Then
        AddTimeFormat = timeStr & ":00"
    Else
        AddTimeFormat = timeStr
    End If
End Function

Private Function StandardizeTime(timeStr As String) As String
    ' 只处理 24:00:00 和 24:00 的情况
    If timeStr = "24:00:00" Or timeStr = "24:00" Then
        StandardizeTime = "24:00"
        Exit Function
    End If
    
    ' 其他时间保持原样
    StandardizeTime = timeStr
End Function

Private Sub FillTimeSlot(ws As Worksheet, monthNum As Integer, _
                        startTimeStr As String, endTimeStr As String, timeType As Integer)
    ' 处理开始时间
    Dim startHour As Long
    On Error Resume Next
    startHour = CLng(Split(startTimeStr, ":")(0))
    If Err.Number <> 0 Then
        startHour = 0
        On Error GoTo 0
    End If
    On Error GoTo 0
    
    ' 处理结束时间
    Dim endHour As Long
    On Error Resume Next
    If InStr(endTimeStr, ":") > 0 Then
        endHour = CLng(Split(endTimeStr, ":")(0))
    Else
        endHour = CLng(endTimeStr)
    End If
    
    ' 特殊处理 24:00:00 的情况
    If endTimeStr = "24:00:00" Then
        endTimeStr = "24:00"
    End If
    
    ' 从时间字符串中提取小时
    If InStr(endTimeStr, ":") > 0 Then
        Dim timeParts() As String
        timeParts = Split(endTimeStr, ":")
        ' 如果时间包含秒，只取小时部分
        If UBound(timeParts) >= 2 Then
            endHour = CLng(timeParts(0))
        Else
            endHour = CLng(timeParts(0))
        End If
    Else
        endHour = CLng(endTimeStr)
    End If
    
    If Err.Number <> 0 Then
        endHour = 24
        On Error GoTo 0
    End If
    On Error GoTo 0
    
    ' 处理跨天的情况
    If endHour < startHour Then
        endHour = endHour + 24
    End If
    
    ' 确保时间在有效范围内
    If startHour < 0 Then startHour = 0
    If endHour > 24 Then endHour = 24
    
    ' 填充时间段
    Dim hour As Long
    For hour = startHour To endHour - 1
        Dim targetHour As Long
        targetHour = hour
        If targetHour >= 24 Then targetHour = targetHour - 24
        
        ' 确保月份在1-12范围内
        Dim targetMonth As Long
        targetMonth = monthNum
        If targetMonth < 1 Then targetMonth = 12
        If targetMonth > 12 Then targetMonth = 1
        
        ' 确保单元格索引在有效范围内
        If targetMonth >= 1 And targetMonth <= 12 And targetHour >= 0 And targetHour <= 23 Then
            ws.Cells(targetMonth + 16, targetHour + 4).value = timeType
        End If
    Next hour
End Sub

Sub CreateTimeTable()
    Dim ws As Worksheet
    Dim i As Integer
    Dim configRange As Range
    
    ' 检查是否存在"时段表"工作表
    On Error Resume Next
    Set ws = ThisWorkbook.Worksheets("时段表")
    If ws Is Nothing Then
        Set ws = ThisWorkbook.Worksheets.Add
        ws.Name = "时段表"
    End If
    On Error GoTo 0
    
    ' 清除工作表内容
    ws.Cells.Clear
    
    ' 设置列标题（小时）
    For i = 0 To 23
        ws.Cells(1, i + 2).value = "'" & i & "-" & (i + 1)
        ws.Cells(1, i + 2).HorizontalAlignment = xlCenter
    Next i
    
    ' 设置月份
    For i = 1 To 12
        ws.Cells(i + 1, 1).value = i & "月"
    Next i
    
    ' 添加图例
    ws.Cells(15, 1).value = "图例说明："
    ws.Cells(16, 1).value = "尖峰时段"
    ws.Cells(17, 1).value = "高峰时段"
    ws.Cells(18, 1).value = "平时段"
    ws.Cells(19, 1).value = "低谷时段"
    
    ' 设置图例颜色
    ws.Cells(16, 2).Interior.ColorIndex = 46 ' 橙色
    ws.Cells(17, 2).Interior.ColorIndex = 6  ' 黄色
    ws.Cells(18, 2).Interior.ColorIndex = 33 ' 蓝色
    ws.Cells(19, 2).Interior.ColorIndex = 35 ' 绿色
    
    ' 添加配置区域标题
    ws.Cells(15, 4).value = "时段状态配置（1=尖峰,2=高峰,3=平段,4=低谷）："
    
    ' 添加配置表格的列标题
    For i = 0 To 23
        ws.Cells(16, i + 4).value = "'" & i & "-" & (i + 1)
        ws.Cells(16, i + 4).HorizontalAlignment = xlCenter
    Next i
    
    ' 添加配置表格的月份
    For i = 1 To 12
        ws.Cells(i + 16, 3).value = i & "月"
    Next i
    
    ' 添加数据验证到配置区域
    Set configRange = ws.Range(ws.Cells(17, 4), ws.Cells(28, 27))
    
    With configRange.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
             Operator:=xlBetween, Formula1:="1", Formula2:="4"
        .ErrorMessage = "请输入1-4之间的数字(1=尖峰,2=高峰,3=平段,4=低谷)"
    End With
    
    ' 设置表格边框
    ws.Range(ws.Cells(1, 1), ws.Cells(13, 25)).Borders.LineStyle = xlContinuous
    configRange.Borders.LineStyle = xlContinuous
End Sub

Sub UpdateConfig()
    Dim ws As Worksheet
    
    ' 检查是否存在"时段表"工作表
    On Error Resume Next
    Set ws = ThisWorkbook.Worksheets("时段表")
    If ws Is Nothing Then
        MsgBox "未找到时段表，请先运行CreateTimeTable创建表格！"
        Exit Sub
    End If
    On Error GoTo 0
    
    ' 遍历配置区域并更新颜色
    Dim i As Integer, j As Integer
    For i = 1 To 12  ' 12个月
        For j = 0 To 23  ' 24小时
            ' 读取配置值
            If Not IsEmpty(ws.Cells(i + 16, j + 4)) Then
                Select Case ws.Cells(i + 16, j + 4).value
                    Case 1 ' 尖峰
                        ws.Cells(i + 1, j + 2).Interior.ColorIndex = 46
                    Case 2 ' 高峰
                        ws.Cells(i + 1, j + 2).Interior.ColorIndex = 6
                    Case 3 ' 平段
                        ws.Cells(i + 1, j + 2).Interior.ColorIndex = 33
                    Case 4 ' 低谷
                        ws.Cells(i + 1, j + 2).Interior.ColorIndex = 35
                End Select
            End If
        Next j
    Next i
End Sub

Sub FillConfig()
' 声明所有变量
    Dim ws As Worksheet
    Dim i As Long        ' 通用循环变量
    Dim rowNum As Long   ' 行号变量
    Dim hourNum As Long  ' 小时变量
    
    ' 检查是否存在"时段表"工作表
    On Error Resume Next
    Set ws = ThisWorkbook.Worksheets("时段表")
    If ws Is Nothing Then
        MsgBox "未找到时段表，请先运行CreateTimeTable创建表格！"
        Exit Sub
    End If
    On Error GoTo 0
    
    ' 清除配置区域
    ws.Range(ws.Cells(17, 4), ws.Cells(28, 27)).ClearContents
    
    ' 遍历每个月份
    For i = 1 To 12     ' 使用 i 作为循环变量
        ' 获取行号
        rowNum = i + 16
        
        ' 冬季 (12,1,2月)
        If i = 12 Or i <= 2 Then
            ' 低谷时段：0:00-8:00
            For hourNum = 0 To 7
                ws.Cells(rowNum, hourNum + 4).value = LOW
            Next hourNum
            
            ' 平段：8:00-10:00
            For hourNum = 8 To 9
                ws.Cells(rowNum, hourNum + 4).value = NORMAL
            Next hourNum
            
            ' 高峰时段：10:00-12:00
            For hourNum = 10 To 11
                ws.Cells(rowNum, hourNum + 4).value = HIGH
            Next hourNum
            
            ' 平段：12:00-16:00
            For hourNum = 12 To 15
                ws.Cells(rowNum, hourNum + 4).value = NORMAL
            Next hourNum
            
            ' 高峰时段：16:00-22:00
            For hourNum = 16 To 21
                ws.Cells(rowNum, hourNum + 4).value = HIGH
            Next hourNum
            
            ' 平段：22:00-24:00
            For hourNum = 22 To 23
                ws.Cells(rowNum, hourNum + 4).value = NORMAL
            Next hourNum
            
        ' 夏季 (7,8,9月)
        ElseIf i >= 7 And i <= 9 Then
            ' 低谷时段：1:00-7:00
            For hourNum = 1 To 6
                ws.Cells(rowNum, hourNum + 4).value = LOW
            Next hourNum
            
            ' 平段：7:00-11:00
            For hourNum = 7 To 10
                ws.Cells(rowNum, hourNum + 4).value = NORMAL
            Next hourNum
            
            ' 高峰时段：11:00-18:00
            For hourNum = 11 To 17
                ws.Cells(rowNum, hourNum + 4).value = HIGH
            Next hourNum
            
            ' 平段：18:00-20:00
            For hourNum = 18 To 19
                ws.Cells(rowNum, hourNum + 4).value = NORMAL
            Next hourNum
            
            ' 高峰时段：20:00-23:00
            For hourNum = 20 To 22
                ws.Cells(rowNum, hourNum + 4).value = HIGH
            Next hourNum
            
            ' 平段：23:00-24:00
            ws.Cells(rowNum, 27).value = NORMAL
            
            ' 特殊处理7月和8月的尖峰时段
            If i <= 8 Then
                ' 尖峰时段：13:00-14:00，21:00-23:00
                ws.Cells(rowNum, 17).value = PEAK  ' 13:00-14:00
                ws.Cells(rowNum, 25).value = PEAK  ' 21:00-22:00
                ws.Cells(rowNum, 26).value = PEAK  ' 22:00-23:00
            End If
            
        ' 春秋季 (3-6、10、11月)
        Else
            ' 低谷时段：22:00-次日8:00
            For hourNum = 0 To 7
                ws.Cells(rowNum, hourNum + 4).value = LOW
            Next hourNum
            For hourNum = 22 To 23
                ws.Cells(rowNum, hourNum + 4).value = LOW
            Next hourNum
            
            ' 平段：8:00-10:00
            For hourNum = 8 To 9
                ws.Cells(rowNum, hourNum + 4).value = NORMAL
            Next hourNum
            
            ' 高峰时段：10:00-12:00
            For hourNum = 10 To 11
                ws.Cells(rowNum, hourNum + 4).value = HIGH
            Next hourNum
            
            ' 平段：12:00-17:00
            For hourNum = 12 To 16
                ws.Cells(rowNum, hourNum + 4).value = NORMAL
            Next hourNum
            
            ' 高峰时段：17:00-22:00
            For hourNum = 17 To 21
                ws.Cells(rowNum, hourNum + 4).value = HIGH
            Next hourNum
        End If
    Next i               ' 使用 i 作为循环变量
    
    ' 自动运行更新
    Call UpdateConfig
End Sub

' 将 CleanTimeFormat 函数移到这里，作为一个独立的函数
Private Function CleanTimeFormat(ByVal timeStr As String) As String
    ' 特殊处理 24:00:00
    If timeStr = "24:00:00" Then
        CleanTimeFormat = "24:00"
        Exit Function
    End If
    
    ' 如果时间包含秒，去掉秒
    If Len(timeStr) > 5 Then
        Dim parts() As String
        parts = Split(timeStr, ":")
        If UBound(parts) = 2 Then
            CleanTimeFormat = parts(0) & ":" & parts(1)
            Exit Function
        End If
    End If
    
    CleanTimeFormat = timeStr
End Function

Private Sub ProcessTimeSlotWithDuplication(ByVal ws As Worksheet, ByVal line As String, ByVal season As String, _
                          ByVal months As String, ByVal timeType As String, ByRef currentRow As Long, ByRef debugRow As Long, _
                          ByVal processedEntries As Collection)
    ' 提取时间段
    Dim timePairs() As String
    timePairs = ExtractTimePairs(line)
    
    ' 记录调试信息
    ws.Cells(debugRow, 6).value = "处理时段: " & line & " (季节: " & season & ", 月份: " & months & ")"
    debugRow = debugRow + 1
    
    ' 检查数组是否为空
    If Not IsEmpty(timePairs) Then
        ' 检查数组是否已初始化
        If Not IsArray(timePairs) Then Exit Sub
        
        ' 检查数组是否有元素
        On Error Resume Next
        Dim arrayLength As Long
        arrayLength = UBound(timePairs)
        If Err.Number <> 0 Then Exit Sub
        On Error GoTo 0
        
        ' 记录时间对数组内容
        Dim debugInfo As String
        debugInfo = "提取的时间对:"
        Dim i As Long
        For i = 0 To arrayLength Step 2
            If i + 1 <= arrayLength Then
                debugInfo = debugInfo & vbCrLf & timePairs(i) & " - " & timePairs(i + 1)
            End If
        Next i
        ws.Cells(debugRow, 6).value = debugInfo
        debugRow = debugRow + 1
        
        If arrayLength >= 1 Then  ' 确保至少有一对时间
            ' 处理月份范围
            Dim monthArray() As String
            monthArray = Split(months, "、")
            
            Dim expandedMonths As Collection
            Set expandedMonths = New Collection
            
            ' 展开月份范围
            Dim m As Variant
            For Each m In monthArray
                If InStr(CStr(m), "-") > 0 Then
                    Dim monthRange() As String
                    monthRange = Split(CStr(m), "-")
                    Dim startMonth As Integer, endMonth As Integer
                    
                    ' 确保月份转换成功
                    On Error Resume Next
                    startMonth = CInt(Trim(monthRange(0)))
                    endMonth = CInt(Trim(monthRange(1)))
                    If Err.Number <> 0 Then
                        On Error GoTo 0
                        ws.Cells(debugRow, 6).value = "警告：月份转换失败 - " & m
                        debugRow = debugRow + 1
                        GoTo ContinueLoop
                    End If
                    On Error GoTo 0
                    
                    Dim monthNum As Integer
                    For monthNum = startMonth To endMonth
                        On Error Resume Next
                        expandedMonths.Add CStr(monthNum), CStr(monthNum)
                        On Error GoTo 0
                    Next monthNum
                Else
                    ' 处理单个月份
                    Dim singleMonth As String
                    singleMonth = Trim(Replace(CStr(m), "月", ""))
                    On Error Resume Next
                    expandedMonths.Add singleMonth, singleMonth
                    On Error GoTo 0
                End If
ContinueLoop:
            Next m
            
            ' 处理时间段
            Dim k As Long
            For k = 0 To arrayLength - 1 Step 2
                If k + 1 <= arrayLength Then
                    ' 记录当前处理的时间对
                    ws.Cells(debugRow, 6).value = "处理时间对: " & timePairs(k) & " - " & timePairs(k + 1)
                    debugRow = debugRow + 1
                    
                    ' 为每个月份创建记录
                    Dim month As Variant
                    For Each month In expandedMonths
                        ' 创建唯一标识符
                        Dim entryKey As String
                        entryKey = CStr(month) & "_" & timeType
                        
                        ' 检查是否已处理过该条目
                        Dim shouldProcess As Boolean
                        shouldProcess = True
                        
                        ' 如果是已处理的条目，检查是否需要更新
                        On Error Resume Next
                        Dim existingEntry As String
                        existingEntry = processedEntries(entryKey)
                        
                        If Err.Number = 0 Then
                            ' 已存在的条目，检查是否需要更新
                            ' 对于低谷时段，我们总是需要处理
                            If timeType = "低谷" Then
                                shouldProcess = True
                            End If
                        Else
                            ' 新条目，添加到处理集合
                            processedEntries.Add entryKey, entryKey
                            shouldProcess = True
                        End If
                        On Error GoTo 0
                        
                        If shouldProcess Then
                            ' 确保时间格式正确
                            Dim startTime As String, endTime As String
                            startTime = timePairs(k)
                            endTime = timePairs(k + 1)
                            
                            ' 如果时间只包含小时数，添加":00"
                            If IsNumeric(startTime) Then startTime = startTime & ":00"
                            If IsNumeric(endTime) Then endTime = endTime & ":00"
                            
                            ' 记录写入前的值
                            debugInfo = "准备写入: " & vbCrLf & _
                                      "月份=" & month & vbCrLf & _
                                      "时段类型=" & timeType & vbCrLf & _
                                      "开始时间=" & startTime & vbCrLf & _
                                      "结束时间=" & endTime
                            ws.Cells(debugRow, 6).value = debugInfo
                            debugRow = debugRow + 1
                            
                            ' 写入值
                            ws.Cells(currentRow, 1).value = season
                            ws.Cells(currentRow, 2).value = month
                            ws.Cells(currentRow, 3).value = timeType
                            ws.Cells(currentRow, 4).value = startTime
                            ws.Cells(currentRow, 5).value = endTime
                            
                            ' 记录写入后的值
                            debugInfo = "写入完成: 行=" & currentRow & vbCrLf & _
                                      "实际值: " & ws.Cells(currentRow, 4).value & " - " & ws.Cells(currentRow, 5).value
                            ws.Cells(debugRow, 6).value = debugInfo
                            debugRow = debugRow + 1
                            
                            currentRow = currentRow + 1
                        End If
                    Next month
                End If
            Next k
        End If
    End If
End Sub

Sub ParseTimeText()
    Dim ws As Worksheet
    Dim wsSource As Worksheet
    Dim inputText As String
    Dim lines() As String
    Dim currentRow As Long
    Dim debugRow As Long
    Dim currentSeason As String
    Dim currentMonths As String
    Dim line As String
    Dim i As Long
    Dim timeType As String
    Dim specificMonths As String
    Dim lastRow As Long
    Dim inputChoice As VbMsgBoxResult
    Dim continueInput As Boolean
    
    ' 首先确保时段表存在并正确初始化
    Call CreateTimeTable
    
    ' 检查是否存在"解析结果"工作表
    On Error Resume Next
    Set ws = ThisWorkbook.Worksheets("解析结果")
    If ws Is Nothing Then
        Set ws = ThisWorkbook.Worksheets.Add
        ws.Name = "解析结果"
    End If
    On Error GoTo 0
    
    ' 如果工作表已存在数据，找到最后一行
    currentRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    If currentRow = 1 Then
        ' 工作表为空，清除内容并设置表头
        ws.Cells.Clear
        ws.Cells(1, 1).value = "季节"
        ws.Cells(1, 2).value = "月份"
        ws.Cells(1, 3).value = "时段类型"
        ws.Cells(1, 4).value = "开始时间"
        ws.Cells(1, 5).value = "结束时间"
        ws.Cells(1, 6).value = "Debug Info"
        currentRow = 2
    Else
        ' 工作表已有数据，从最后一行继续
        currentRow = currentRow + 1
    End If
    
    debugRow = ws.Cells(ws.Rows.Count, 6).End(xlUp).Row + 1
    
    ' 询问用户选择输入方式
    inputChoice = MsgBox("是否从'分时电价文字'工作表读取数据？" & vbCrLf & _
                        "选择'是'从工作表读取" & vbCrLf & _
                        "选择'否'手动输入文本", _
                        vbYesNoCancel + vbQuestion, "选择输入方式")
    
    If inputChoice = vbCancel Then
        Exit Sub
    ElseIf inputChoice = vbYes Then
        ' 从工作表读取数据
        ' 检查是否存在"分时电价文字"工作表
        On Error Resume Next
        Set wsSource = ThisWorkbook.Worksheets("分时电价文字")
        If wsSource Is Nothing Then
            MsgBox "未找到'分时电价文字'工作表！请确保该工作表存在，并在B列第二行开始填写文本。", vbExclamation
            Exit Sub
        End If
        On Error GoTo 0
        
        ' 获取源数据的最后一行
        lastRow = wsSource.Cells(wsSource.Rows.Count, "B").End(xlUp).Row
        If lastRow < 2 Then
            MsgBox "在'分时电价文字'工作表的B列未找到数据！", vbExclamation
            Exit Sub
        End If
        
        ' 记录开始处理
        ws.Cells(debugRow, 6).value = "开始处理'分时电价文字'工作表的数据"
        debugRow = debugRow + 1
        
        ' 处理每一行文本
        For i = 2 To lastRow
            line = Trim(wsSource.Cells(i, "B").value)
            
            ' 记录原始行内容
            If line <> "" Then
                ws.Cells(debugRow, 6).value = "处理行 " & i & ": " & line
                debugRow = debugRow + 1
                
                Call ProcessTextLine(line, currentSeason, currentMonths, specificMonths, timeType, ws, debugRow, currentRow)
            End If
        Next i
    Else
        ' 手动输入文本
        Do
            ' 获取用户输入的文本
            inputText = InputBox("请粘贴需要解析的文本（如果已完成所有粘贴，请直接点击取消按钮）：", "文本解析")
            
            If inputText = "" Then
                Exit Do
            End If
            
            ' 预处理文本
            inputText = Replace(inputText, vbCrLf, vbLf)
            inputText = Replace(inputText, vbCr, vbLf)
            inputText = Replace(inputText, "，", "、")
            inputText = Replace(inputText, ",", "、")
            
            ' 标准化换行符
            While InStr(inputText, vbLf & vbLf) > 0
                inputText = Replace(inputText, vbLf & vbLf, vbLf)
            Wend
            
            ' 按行分割文本
            lines = Split(inputText, vbLf)
            
            ' 记录原始文本
            ws.Cells(debugRow, 6).value = "新输入文本块开始"
            debugRow = debugRow + 1
            
            ' 处理每一行
            For i = 0 To UBound(lines)
                line = Trim(lines(i))
                
                ' 记录原始行内容
                If line <> "" Then
                    Call ProcessTextLine(line, currentSeason, currentMonths, specificMonths, timeType, ws, debugRow, currentRow)
                End If
            Next i
            
            ws.Cells(debugRow, 6).value = "当前文本块处理完成"
            debugRow = debugRow + 1
            
            ' 询问是否继续输入
            continueInput = MsgBox("是否还有更多文本需要粘贴？", vbYesNo + vbQuestion, "继续输入") = vbYes
        Loop While continueInput
    End If
    
    ' 自动调整列宽
    ws.Columns("A:F").AutoFit
    
    MsgBox "文本解析完成！结果已保存在'解析结果'工作表中。请运行ConvertToTimeConfig更新时段表。", vbInformation
End Sub

Private Sub ProcessTextLine(ByVal line As String, ByRef currentSeason As String, ByRef currentMonths As String, _
                          ByRef specificMonths As String, ByRef timeType As String, _
                          ByVal ws As Worksheet, ByRef debugRow As Long, ByRef currentRow As Long)
    ' 检查是否是季节行
    If InStr(line, "季") > 0 Then
        ' 提取月份信息
        specificMonths = ExtractMonths(line)
        
        If InStr(line, "春季") > 0 Then
            currentSeason = "春季"
            If specificMonths = "" Then specificMonths = "3、4、5、6"
            ws.Cells(debugRow, 6).value = "季节: 春季, 月份: " & specificMonths
            debugRow = debugRow + 1
        ElseIf InStr(line, "夏季") > 0 Then
            currentSeason = "夏季"
            ' 不再设置默认月份，使用实际提取的月份
            ws.Cells(debugRow, 6).value = "季节: 夏季, 月份: " & specificMonths
            debugRow = debugRow + 1
        ElseIf InStr(line, "秋季") > 0 Then
            currentSeason = "秋季"
            If specificMonths = "" Then specificMonths = "10、11"
            ws.Cells(debugRow, 6).value = "季节: 秋季, 月份: " & specificMonths
            debugRow = debugRow + 1
        ElseIf InStr(line, "冬季") > 0 Then
            currentSeason = "冬季"
            If specificMonths = "" Then specificMonths = "12、1、2"
            ws.Cells(debugRow, 6).value = "季节: 冬季, 月份: " & specificMonths
            debugRow = debugRow + 1
        End If
        currentMonths = specificMonths
    End If
    
    ' 如果是时段行，处理时段信息
    If currentSeason <> "" And (InStr(line, "时段") > 0 Or InStr(line, "平段") > 0) Then
        ' 获取时段类型
        timeType = ""
        If InStr(line, "尖峰") > 0 Then
            timeType = "尖峰"
        ElseIf InStr(line, "高峰") > 0 Then
            timeType = "高峰"
        ElseIf InStr(line, "平段") > 0 Then
            timeType = "平段"
        ElseIf InStr(line, "低谷") > 0 Then
            timeType = "低谷"
        End If
        
        ' 处理时段信息
        If timeType <> "" Then
            ws.Cells(debugRow, 6).value = "处理时段: " & timeType & " - " & line & " (月份: " & currentMonths & ")"
            debugRow = debugRow + 1
            Call ProcessTimeSlotWithDuplication(ws, line, currentSeason, currentMonths, timeType, currentRow, debugRow)
        End If
    End If
End Sub

Sub ConvertToTimeConfig()
    Dim wsSource As Worksheet, wsTarget As Worksheet
    Dim lastRow As Long, i As Long
    Dim monthNum As Integer, timeValue As Integer
    Dim startTime As String, endTime As String
    Dim startHour As Double, endHour As Double
    Dim debugInfo As String
    
    ' 获取工作表
    On Error Resume Next
    Set wsSource = ThisWorkbook.Worksheets("解析结果")
    Set wsTarget = ThisWorkbook.Worksheets("时段表")
    
    ' 检查工作表是否存在
    If wsSource Is Nothing Then
        MsgBox "未找到'解析结果'工作表！", vbExclamation
        Exit Sub
    End If
    If wsTarget Is Nothing Then
        MsgBox "未找到'时段表'工作表！", vbExclamation
        Exit Sub
    End If
    On Error GoTo 0
    
    ' 获取最后一行
    lastRow = wsSource.Range("A" & Rows.Count).End(xlUp).row
    
    ' 检查是否有数据
    If lastRow <= 1 Then
        MsgBox "解析结果表中没有数据！", vbExclamation
        Exit Sub
    End If
    
    ' 创建调试工作表
    Dim wsDebug As Worksheet
    On Error Resume Next
    Set wsDebug = ThisWorkbook.Worksheets("调试信息")
    If wsDebug Is Nothing Then
        Set wsDebug = ThisWorkbook.Worksheets.Add
        wsDebug.Name = "调试信息"
    End If
    On Error GoTo 0
    
    ' 设置调试表头
    wsDebug.Cells.Clear
    wsDebug.Cells(1, 1).value = "行号"
    wsDebug.Cells(1, 2).value = "月份"
    wsDebug.Cells(1, 3).value = "时段类型"
    wsDebug.Cells(1, 4).value = "开始时间"
    wsDebug.Cells(1, 5).value = "结束时间"
    wsDebug.Cells(1, 6).value = "处理结果"
    
    Dim debugRow As Long
    debugRow = 2
    
    ' 创建一个二维数组来存储所有时段配置
    Dim timeConfig() As Integer
    ReDim timeConfig(1 To 12, 0 To 23) As Integer
    
    ' 创建一个集合来跟踪已处理的月份
    Dim processedMonths As New Collection
    On Error Resume Next
    
    ' 首先处理尖峰时段
    For i = 2 To lastRow
        If Trim(wsSource.Cells(i, 3).value) = "尖峰" Then
            Call ProcessTimeSlot(wsSource, i, timeConfig, wsDebug, debugRow, processedMonths)
        End If
    Next i
    
    ' 然后处理高峰时段
    For i = 2 To lastRow
        If Trim(wsSource.Cells(i, 3).value) = "高峰" Then
            Call ProcessTimeSlot(wsSource, i, timeConfig, wsDebug, debugRow, processedMonths)
        End If
    Next i
    
    ' 接着处理平段时段
    For i = 2 To lastRow
        If Trim(wsSource.Cells(i, 3).value) = "平段" Then
            Call ProcessTimeSlot(wsSource, i, timeConfig, wsDebug, debugRow, processedMonths)
        End If
    Next i
    
    ' 最后处理低谷时段
    For i = 2 To lastRow
        If Trim(wsSource.Cells(i, 3).value) = "低谷" Then
            Call ProcessTimeSlot(wsSource, i, timeConfig, wsDebug, debugRow, processedMonths)
        End If
    Next i
    
    ' 将数组写入工作表
    For monthNum = 1 To 12
        For i = 0 To 23
            If timeConfig(monthNum, i) <> 0 Then
                wsTarget.Cells(monthNum + 16, i + 4).value = timeConfig(monthNum, i)
            End If
        Next i
    Next monthNum
    
    ' 更新颜色
    Call UpdateConfig
    
    ' 调整调试表格列宽
    wsDebug.Columns.AutoFit
    
    ' 显示处理结果
    Dim processedMonthsList As String
    processedMonthsList = ""
    For i = 1 To 12
        On Error Resume Next
        processedMonths.Item CStr(i)
        If Err.Number = 0 Then
            If processedMonthsList <> "" Then processedMonthsList = processedMonthsList & ", "
            processedMonthsList = processedMonthsList & i & "月"
        End If
        On Error GoTo 0
    Next i
    
    If processedMonthsList = "" Then
        MsgBox "未找到有效的月份数据！", vbExclamation
    Else
        MsgBox "时段配置表已更新！已处理以下月份的数据：" & vbCrLf & processedMonthsList & vbCrLf & vbCrLf & _
               "请查看'调试信息'工作表了解详细处理过程。", vbInformation
    End If
End Sub

Private Sub ProcessTimeSlot(ByVal wsSource As Worksheet, ByVal rowIndex As Long, ByRef timeConfig() As Integer, _
                          ByVal wsDebug As Worksheet, ByRef debugRow As Long, ByRef processedMonths As Collection)
    Dim monthStr As String, monthNum As Integer, timeValue As Integer
    Dim startTime As String, endTime As String
    Dim startHour As Double, endHour As Double
    Dim debugInfo As String
    
    ' 获取月份
    monthStr = wsSource.Cells(rowIndex, 2).value
    monthStr = Replace(Replace(monthStr, "月", ""), " ", "")
    
    If IsNumeric(monthStr) Then
        monthNum = CInt(monthStr)
        
        ' 添加月份到已处理集合
        On Error Resume Next
        processedMonths.Add monthNum, CStr(monthNum)
        On Error GoTo 0
        
        ' 获取时段类型
        Select Case Trim(wsSource.Cells(rowIndex, 3).value)
            Case "尖峰": timeValue = 1
            Case "高峰": timeValue = 2
            Case "平段": timeValue = 3
            Case "低谷": timeValue = 4
            Case Else: timeValue = 0
        End Select
        
        ' 获取时间
        Dim startCell As Range, endCell As Range
        Set startCell = wsSource.Cells(rowIndex, 4)
        Set endCell = wsSource.Cells(rowIndex, 5)
        
        ' 处理时间值
        If startCell.text Like "*:*" Then
            startTime = startCell.text
            startHour = Val(Split(startTime, ":")(0))
        ElseIf IsNumeric(startCell.value) Then
            startHour = startCell.value * 24
        End If
        
        If endCell.text Like "*:*" Then
            endTime = endCell.text
            endHour = Val(Split(endTime, ":")(0))
        ElseIf IsNumeric(endCell.value) Then
            endHour = endCell.value * 24
        End If
        
        ' 确保时间在有效范围内
        If startHour < 0 Then startHour = 0
        If startHour >= 24 Then startHour = startHour - 24
        If endHour <= 0 Then endHour = 24
        If endHour > 24 Then endHour = 24
        
        ' 处理跨天的情况
        If endHour < startHour Then
            endHour = endHour + 24
        End If
        
        ' 记录处理后的时间信息
        debugInfo = "处理后: 月份=" & monthNum & ", 时段=" & timeValue & _
                   ", 开始时间=" & startHour & ", 结束时间=" & endHour & _
                   ", 原始时间=" & startCell.text & "-" & endCell.text & _
                   ", 时段类型=" & wsSource.Cells(rowIndex, 3).value
        wsDebug.Cells(debugRow, 6).value = debugInfo
        
        ' 填充时段到数组
        If monthNum >= 1 And monthNum <= 12 Then
            Dim j As Double
            For j = startHour To endHour - 1 Step 1
                ' 处理跨天情况
                Dim targetHour As Integer
                targetHour = Int(j)
                If targetHour >= 24 Then
                    targetHour = targetHour - 24
                End If
                
                If targetHour >= 0 And targetHour <= 23 Then
                    ' 只有当新的时段类型优先级更高时才覆盖
                    If timeConfig(monthNum, targetHour) = 0 Or timeValue < timeConfig(monthNum, targetHour) Then
                        timeConfig(monthNum, targetHour) = timeValue
                        debugInfo = debugInfo & vbCrLf & _
                                  "记录到数组: 月份=" & monthNum & _
                                  ", 目标小时=" & targetHour & _
                                  ", 时段值=" & timeValue
                        wsDebug.Cells(debugRow, 6).value = debugInfo
                    End If
                End If
            Next j
        End If
    End If
    
    debugRow = debugRow + 1
End Sub









































