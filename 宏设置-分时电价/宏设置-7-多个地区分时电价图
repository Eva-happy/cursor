Option Explicit

' 添加常量定义
Private Const PEAK As Integer = 1     ' 尖峰
Private Const HIGH As Integer = 2     ' 高峰
Private Const NORMAL As Integer = 3   ' 平段
Private Const LOW As Integer = 4      ' 低谷
Private Const DEEP_LOW As Integer = 5 ' 深谷

' 首先定义所有辅助函数
Private Function GetStandardizedMonths(season As String, monthText As String) As String
    Dim result As String
    
    ' 如果是春秋季，需要根据月份判断是春季还是秋季
    If season = "春秋季" Then
        Dim months() As String
        months = Split(monthText, "、")
        Dim monthList As String
        monthList = ""
        
        Dim i As Long
        For i = 0 To UBound(months)
            If InStr(months(i), "-") > 0 Then
                Dim monthRange() As String
                monthRange = Split(months(i), "-")
                Dim startMonth As Long, endMonth As Long
                
                ' 确保转换成功
                On Error Resume Next
                startMonth = CLng(Trim(monthRange(0)))
                endMonth = CLng(Trim(monthRange(1)))
                On Error GoTo 0
                
                ' 处理每个月份
                Dim m As Long
                For m = startMonth To endMonth
                    If m >= 3 And m <= 6 Then
                        If monthList <> "" Then monthList = monthList & "、"
                        monthList = monthList & CStr(m)
                    End If
                Next m
            Else
                Dim currentMonth As Long
                ' 确保转换成功
                On Error Resume Next
                currentMonth = CLng(Trim(months(i)))
                On Error GoTo 0
                
                If currentMonth >= 3 And currentMonth <= 6 Then
                    If monthList <> "" Then monthList = monthList & "、"
                    monthList = monthList & CStr(currentMonth)
                End If
            End If
        Next i
        
        If monthList <> "" Then
            result = monthList
        End If
    ElseIf season = "夏季" Then
        result = "7、8、9"
    ElseIf season = "冬季" Then
        result = "12、1、2"
    End If
    
    GetStandardizedMonths = result
End Function

Private Function GetSeasonByMonth(monthNum As Integer) As String
    If monthNum >= 3 And monthNum <= 6 Then
        GetSeasonByMonth = "春季"
    ElseIf monthNum >= 7 And monthNum <= 9 Then
        GetSeasonByMonth = "夏季"
    ElseIf monthNum >= 10 And monthNum <= 11 Then
        GetSeasonByMonth = "秋季"
    Else
        GetSeasonByMonth = "冬季"
    End If
End Function

Private Function ExtractMonths(text As String) As String
    Dim result As String
    Dim start As Long
    Dim finish As Long
    
    ' 如果是冬季，直接返回冬季月份
    If InStr(text, "冬季") > 0 Then
        ExtractMonths = "12、1、2"
        Exit Function
    End If
    
    ' 提取括号中的月份信息
    start = InStr(text, "(")
    If start = 0 Then start = InStr(text, "（")
    
    finish = InStr(text, ")")
    If finish = 0 Then finish = InStr(text, "）")
    
    If start > 0 And finish > 0 Then
        result = Mid(text, start + 1, finish - start - 1)
        ' 移除"月"字
        result = Replace(result, "月", "")
    End If
    
    ExtractMonths = result
End Function

Private Function ExtractTimePairs(text As String) As String()
    Dim timeStr As String
    Dim pos As Long
    
    ' 提取冒号后的时间信息
    pos = InStr(text, "：")
    If pos = 0 Then pos = InStr(text, ":")
    
    If pos > 0 Then
        timeStr = Mid(text, pos + 1)
        timeStr = Trim(timeStr)  ' 添加去除首尾空格
        
        ' 替换中文顿号、逗号和分号
        timeStr = Replace(timeStr, "、", ",")
        timeStr = Replace(timeStr, "，", ",")
        timeStr = Replace(timeStr, "；", ",")
        timeStr = Replace(timeStr, ";", ",")
        
        ' 替换不同类型的连字符为标准连字符
        timeStr = Replace(timeStr, "—", "-")  ' 替换中文破折号
        timeStr = Replace(timeStr, "－", "-")  ' 替换全角连字符
        timeStr = Replace(timeStr, "–", "-")   ' 替换短破折号
        timeStr = Replace(timeStr, "─", "-")   ' 替换水平线
        timeStr = Replace(timeStr, "━", "-")   ' 替换粗水平线
        
        ' 处理括号中的说明文字
        Dim bracketStart As Long, bracketEnd As Long
        bracketStart = InStr(timeStr, "（")
        If bracketStart > 0 Then
            bracketEnd = InStr(bracketStart, timeStr, "）")
            If bracketEnd > 0 Then
                timeStr = Left(timeStr, bracketStart - 1) & Mid(timeStr, bracketEnd + 1)
            End If
        End If
        
        ' 去除多余的空格
        timeStr = Replace(timeStr, " ", "")
        
        ' 分割多个时间段
        Dim timeParts() As String
        timeParts = Split(timeStr, ",")
        
        ' 计算有效的时间段对数
        Dim validPairs As Long
        validPairs = 0
        Dim i As Long
        
        ' 先统计有效时间对的数量
        For i = 0 To UBound(timeParts)
            Dim currentPart As String
            currentPart = Trim(timeParts(i))
            If currentPart <> "" Then
                If InStr(currentPart, "-") > 0 Then
                    ' 检查是否是跨天时间段
                    If InStr(currentPart, "次日") > 0 Then
                        validPairs = validPairs + 2  ' 跨天时间段会被拆分为两个时间段
                    Else
                        validPairs = validPairs + 1
                    End If
                ElseIf InStr(currentPart, "至") > 0 Then
                    validPairs = validPairs + 1
                End If
            End If
        Next i
        
        If validPairs > 0 Then
            Dim result() As String
            ReDim result((validPairs * 2) - 1)
            
            Dim resultIndex As Long
            resultIndex = 0
            
            ' 处理每个时间段
            For i = 0 To UBound(timeParts)
                Dim currentTime As String
                currentTime = Trim(timeParts(i))
                
                If currentTime <> "" Then
                    Dim timePair() As String
                    If InStr(currentTime, "-") > 0 Then
                        timePair = Split(currentTime, "-")
                    ElseIf InStr(currentTime, "至") > 0 Then
                        timePair = Split(currentTime, "至")
                    End If
                    
                    If UBound(timePair) = 1 Then
                        ' 检查是否是跨天时间段
                        If InStr(timePair(1), "次日") > 0 Then
                            ' 处理第一段时间（当天部分）
                            result(resultIndex) = StandardizeTime(AddTimeFormat(Trim(timePair(0))))
                            result(resultIndex + 1) = "24:00"
                            resultIndex = resultIndex + 2
                            
                            ' 处理第二段时间（次日部分）
                            result(resultIndex) = "00:00"
                            result(resultIndex + 1) = StandardizeTime(AddTimeFormat(Trim(Replace(timePair(1), "次日", ""))))
                            resultIndex = resultIndex + 2
                        Else
                            ' 处理普通时间段
                            Dim startTimeStr As String, endTimeStr As String
                            startTimeStr = Trim(timePair(0))
                            endTimeStr = Trim(timePair(1))
                            
                            ' 确保时间格式正确
                            If IsNumeric(startTimeStr) Then startTimeStr = startTimeStr & ":00"
                            If IsNumeric(endTimeStr) Then endTimeStr = endTimeStr & ":00"
                            
                            result(resultIndex) = StandardizeTime(startTimeStr)
                            result(resultIndex + 1) = StandardizeTime(endTimeStr)
                            resultIndex = resultIndex + 2
                        End If
                    End If
                End If
            Next i
            
            ExtractTimePairs = result
        End If
    End If
End Function

Private Function AddTimeFormat(timeStr As String) As String
    ' 如果时间字符串只包含数字，添加":00"
    If IsNumeric(timeStr) Then
        AddTimeFormat = timeStr & ":00"
    Else
        AddTimeFormat = timeStr
    End If
End Function

Private Function StandardizeTime(timeStr As String) As String
    ' 只处理 24:00:00 和 24:00 的情况
    If timeStr = "24:00:00" Or timeStr = "24:00" Then
        StandardizeTime = "24:00"
        Exit Function
    End If
    
    ' 其他时间保持原样
    StandardizeTime = timeStr
End Function

Private Sub FillTimeSlot(ws As Worksheet, monthNum As Integer, _
                        startTimeStr As String, endTimeStr As String, timeType As Integer)
    ' 处理开始时间
    Dim startHour As Long
    On Error Resume Next
    startHour = CLng(Split(startTimeStr, ":")(0))
    If Err.Number <> 0 Then
        startHour = 0
        On Error GoTo 0
    End If
    On Error GoTo 0
    
    ' 处理结束时间
    Dim endHour As Long
    On Error Resume Next
    If InStr(endTimeStr, ":") > 0 Then
        endHour = CLng(Split(endTimeStr, ":")(0))
    Else
        endHour = CLng(endTimeStr)
    End If
    
    ' 特殊处理 24:00:00 的情况
    If endTimeStr = "24:00:00" Then
        endTimeStr = "24:00"
    End If
    
    ' 从时间字符串中提取小时
    If InStr(endTimeStr, ":") > 0 Then
        Dim timeParts() As String
        timeParts = Split(endTimeStr, ":")
        ' 如果时间包含秒，只取小时部分
        If UBound(timeParts) >= 2 Then
            endHour = CLng(timeParts(0))
        Else
            endHour = CLng(timeParts(0))
        End If
    Else
        endHour = CLng(endTimeStr)
    End If
    
    If Err.Number <> 0 Then
        endHour = 24
        On Error GoTo 0
    End If
    On Error GoTo 0
    
    ' 处理跨天的情况
    If endHour < startHour Then
        endHour = endHour + 24
    End If
    
    ' 确保时间在有效范围内
    If startHour < 0 Then startHour = 0
    If endHour > 24 Then endHour = 24
    
    ' 填充时间段
    Dim hour As Long
    For hour = startHour To endHour - 1
        Dim targetHour As Long
        targetHour = hour
        If targetHour >= 24 Then targetHour = targetHour - 24
        
        ' 确保月份在1-12范围内
        Dim targetMonth As Long
        targetMonth = monthNum
        If targetMonth < 1 Then targetMonth = 12
        If targetMonth > 12 Then targetMonth = 1
        
        ' 确保单元格索引在有效范围内
        If targetMonth >= 1 And targetMonth <= 12 And targetHour >= 0 And targetHour <= 23 Then
            ws.Cells(targetMonth + 16, targetHour + 4).value = timeType
        End If
    Next hour
End Sub

Sub CreateTimeTable()
    Dim ws As Worksheet
    Dim i As Integer, j As Integer
    Dim configRange As Range
    
    ' 检查是否存在"时段表"工作表
    On Error Resume Next
    Set ws = ThisWorkbook.Worksheets("时段表")
    If ws Is Nothing Then
        Set ws = ThisWorkbook.Worksheets.Add
        ws.Name = "时段表"
    End If
    On Error GoTo 0
    
    ' 清除工作表内容
    ws.Cells.Clear
    
    ' 设置地区列标题
    ws.Cells(1, 1).value = "地区"
    
    ' 设置列标题（小时）
    For i = 0 To 23
        ws.Cells(1, i + 3).value = "'" & i & "-" & (i + 1)
        ws.Cells(1, i + 3).HorizontalAlignment = xlCenter
    Next i
    
    ' 设置月份列标题
    ws.Cells(1, 2).value = "月份"
    
    ' 自动生成1-12月
    For i = 1 To 12
        For j = 2 To ws.Cells(ws.Rows.Count, 1).End(xlUp).row + 1
            ws.Cells(j, 2).value = i & "月"
            j = j + 11  ' 每个地区12个月，所以跳过11行
        Next j
    Next i
    
    ' 添加图例
    ws.Cells(1, 28).value = "图例说明："
    ws.Cells(2, 28).value = "尖峰时段"
    ws.Cells(3, 28).value = "高峰时段"
    ws.Cells(4, 28).value = "平时段"
    ws.Cells(5, 28).value = "低谷时段"
    ws.Cells(6, 28).value = "深谷时段"
    
    ' 设置图例颜色
    ws.Cells(2, 29).Interior.Color = RGB(255, 192, 0)  ' 橙色 - 尖峰
    ws.Cells(3, 29).Interior.Color = RGB(255, 192, 203)  ' 粉红色 - 高峰
    ws.Cells(4, 29).Interior.Color = RGB(189, 215, 238) ' 浅蓝色 - 平段
    ws.Cells(5, 29).Interior.Color = RGB(198, 239, 206) ' 浅绿色 - 低谷
    ws.Cells(6, 29).Interior.Color = RGB(0, 112, 192)   ' 深蓝色 - 深谷
    
    ' 添加配置区域标题
    ws.Cells(1, 31).value = "时段状态配置（1=尖峰,2=高峰,3=平段,4=低谷,5=深谷）"
    
    ' 设置表格边框
    With ws.Range(ws.Cells(1, 1), ws.Cells(ws.Cells(ws.Rows.Count, 1).End(xlUp).row, 26))
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
    End With
    
    ' 设置标题行格式
    With ws.Range("A1:Z1")
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .Interior.Color = RGB(217, 217, 217)  ' 浅灰色背景
    End With
    
    ' 只在A列添加筛选功能
    ws.Range("A1").AutoFilter Field:=1
    
    ' 冻结首行
    ws.Rows("1:1").Select
    ActiveWindow.FreezePanes = True
    
    ' 调整列宽
    ws.Columns("A:Z").AutoFit
    
    ' 设置默认行高
    ws.Rows.RowHeight = 20
End Sub

Sub UpdateConfig()
    Dim ws As Worksheet
    
    ' 检查是否存在"时段表"工作表
    On Error Resume Next
    Set ws = ThisWorkbook.Worksheets("时段表")
    If ws Is Nothing Then
        MsgBox "未找到时段表，请先运行CreateTimeTable创建表格！"
        Exit Sub
    End If
    On Error GoTo 0
    
    ' 遍历配置区域并更新颜色
    Dim i As Integer, j As Integer
    For i = 1 To 12  ' 12个月
        For j = 0 To 23  ' 24小时
            ' 读取配置值
            If Not IsEmpty(ws.Cells(i + 16, j + 4)) Then
                Select Case ws.Cells(i + 16, j + 4).value
                    Case 1 ' 尖峰
                        ws.Cells(i + 1, j + 2).Interior.Color = RGB(255, 192, 0)  ' 橙色
                    Case 2 ' 高峰
                        ws.Cells(i + 1, j + 2).Interior.Color = RGB(255, 192, 203)  ' 粉红色
                    Case 3 ' 平段
                        ws.Cells(i + 1, j + 2).Interior.Color = RGB(189, 215, 238) ' 浅蓝色
                    Case 4 ' 低谷
                        ws.Cells(i + 1, j + 2).Interior.Color = RGB(198, 239, 206) ' 浅绿色
                    Case 5 ' 深谷
                        ws.Cells(i + 1, j + 2).Interior.Color = RGB(0, 112, 192)   ' 深蓝色
                End Select
            End If
        Next j
    Next i
End Sub

Sub FillConfig()
' 声明所有变量
    Dim ws As Worksheet
    Dim i As Long        ' 通用循环变量
    Dim rowNum As Long   ' 行号变量
    Dim hourNum As Long  ' 小时变量
    
    ' 检查是否存在"时段表"工作表
    On Error Resume Next
    Set ws = ThisWorkbook.Worksheets("时段表")
    If ws Is Nothing Then
        MsgBox "未找到时段表，请先运行CreateTimeTable创建表格！"
        Exit Sub
    End If
    On Error GoTo 0
    
    ' 清除配置区域
    ws.Range(ws.Cells(17, 4), ws.Cells(28, 27)).ClearContents
    
    ' 遍历每个月份
    For i = 1 To 12     ' 使用 i 作为循环变量
        ' 获取行号
        rowNum = i + 16
        
        ' 冬季 (12,1,2月)
        If i = 12 Or i <= 2 Then
            ' 低谷时段：0:00-8:00
            For hourNum = 0 To 7
                ws.Cells(rowNum, hourNum + 4).value = LOW
            Next hourNum
            
            ' 平段：8:00-10:00
            For hourNum = 8 To 9
                ws.Cells(rowNum, hourNum + 4).value = NORMAL
            Next hourNum
            
            ' 高峰时段：10:00-12:00
            For hourNum = 10 To 11
                ws.Cells(rowNum, hourNum + 4).value = HIGH
            Next hourNum
            
            ' 平段：12:00-16:00
            For hourNum = 12 To 15
                ws.Cells(rowNum, hourNum + 4).value = NORMAL
            Next hourNum
            
            ' 高峰时段：16:00-22:00
            For hourNum = 16 To 21
                ws.Cells(rowNum, hourNum + 4).value = HIGH
            Next hourNum
            
            ' 平段：22:00-24:00
            For hourNum = 22 To 23
                ws.Cells(rowNum, hourNum + 4).value = NORMAL
            Next hourNum
            
        ' 夏季 (7,8,9月)
        ElseIf i >= 7 And i <= 9 Then
            ' 低谷时段：1:00-7:00
            For hourNum = 1 To 6
                ws.Cells(rowNum, hourNum + 4).value = LOW
            Next hourNum
            
            ' 平段：7:00-11:00
            For hourNum = 7 To 10
                ws.Cells(rowNum, hourNum + 4).value = NORMAL
            Next hourNum
            
            ' 高峰时段：11:00-18:00
            For hourNum = 11 To 17
                ws.Cells(rowNum, hourNum + 4).value = HIGH
            Next hourNum
            
            ' 平段：18:00-20:00
            For hourNum = 18 To 19
                ws.Cells(rowNum, hourNum + 4).value = NORMAL
            Next hourNum
            
            ' 高峰时段：20:00-23:00
            For hourNum = 20 To 22
                ws.Cells(rowNum, hourNum + 4).value = HIGH
            Next hourNum
            
            ' 平段：23:00-24:00
            ws.Cells(rowNum, 27).value = NORMAL
            
            ' 特殊处理7月和8月的尖峰时段
            If i <= 8 Then
                ' 尖峰时段：13:00-14:00，21:00-23:00
                ws.Cells(rowNum, 17).value = PEAK  ' 13:00-14:00
                ws.Cells(rowNum, 25).value = PEAK  ' 21:00-22:00
                ws.Cells(rowNum, 26).value = PEAK  ' 22:00-23:00
            End If
            
        ' 春秋季 (3-6、10、11月)
        Else
            ' 低谷时段：22:00-次日8:00
            For hourNum = 0 To 7
                ws.Cells(rowNum, hourNum + 4).value = LOW
            Next hourNum
            For hourNum = 22 To 23
                ws.Cells(rowNum, hourNum + 4).value = LOW
            Next hourNum
            
            ' 平段：8:00-10:00
            For hourNum = 8 To 9
                ws.Cells(rowNum, hourNum + 4).value = NORMAL
            Next hourNum
            
            ' 高峰时段：10:00-12:00
            For hourNum = 10 To 11
                ws.Cells(rowNum, hourNum + 4).value = HIGH
            Next hourNum
            
            ' 平段：12:00-17:00
            For hourNum = 12 To 16
                ws.Cells(rowNum, hourNum + 4).value = NORMAL
            Next hourNum
            
            ' 高峰时段：17:00-22:00
            For hourNum = 17 To 21
                ws.Cells(rowNum, hourNum + 4).value = HIGH
            Next hourNum
        End If
    Next i               ' 使用 i 作为循环变量
    
    ' 自动运行更新
    Call UpdateConfig
End Sub

' 将 CleanTimeFormat 函数移到这里，作为一个独立的函数
Private Function CleanTimeFormat(ByVal timeStr As String) As String
    ' 特殊处理 24:00:00
    If timeStr = "24:00:00" Then
        CleanTimeFormat = "24:00"
        Exit Function
    End If
    
    ' 如果时间包含秒，去掉秒
    If Len(timeStr) > 5 Then
        Dim parts() As String
        parts = Split(timeStr, ":")
        If UBound(parts) = 2 Then
            CleanTimeFormat = parts(0) & ":" & parts(1)
            Exit Function
        End If
    End If
    
    CleanTimeFormat = timeStr
End Function

Private Sub ProcessTimeSlotWithDuplication(ByVal ws As Worksheet, ByVal line As String, ByVal season As String, _
                          ByVal months As String, ByVal timeType As String, ByRef currentRow As Long, ByRef debugRow As Long, _
                          ByVal processedEntries As Collection, ByVal currentRegion As String)
    ' 提取时间段
    Dim timePairs() As String
    timePairs = ExtractTimePairs(line)
    
    ' 记录调试信息
    ws.Cells(debugRow, 7).value = "地区: " & currentRegion & ", 处理时段: " & line & " (季节: " & season & ", 月份: " & months & ")"
    debugRow = debugRow + 1
    
    ' 检查数组是否为空
    If Not IsEmpty(timePairs) Then
        ' 检查数组是否已初始化
        If Not IsArray(timePairs) Then Exit Sub
        
        ' 检查数组是否有元素
        On Error Resume Next
        Dim arrayLength As Long
        arrayLength = UBound(timePairs)
        If Err.Number <> 0 Then Exit Sub
        On Error GoTo 0
        
        ' 记录时间对数组内容
        Dim debugInfo As String
        debugInfo = "地区: " & currentRegion & ", 提取的时间对:"
        Dim i As Long
        For i = 0 To arrayLength Step 2
            If i + 1 <= arrayLength Then
                debugInfo = debugInfo & vbCrLf & timePairs(i) & " - " & timePairs(i + 1)
            End If
        Next i
        ws.Cells(debugRow, 7).value = debugInfo
        debugRow = debugRow + 1
        
        If arrayLength >= 1 Then  ' 确保至少有一对时间
            ' 处理月份范围
            Dim monthArray() As String
            monthArray = Split(months, "、")
            
            Dim expandedMonths As Collection
            Set expandedMonths = New Collection
            
            ' 展开月份范围
            Dim m As Variant
            For Each m In monthArray
                If InStr(CStr(m), "-") > 0 Then
                    Dim monthRange() As String
                    monthRange = Split(CStr(m), "-")
                    Dim startMonth As Integer, endMonth As Integer
                    
                    ' 确保月份转换成功
                    On Error Resume Next
                    startMonth = CInt(Trim(monthRange(0)))
                    endMonth = CInt(Trim(monthRange(1)))
                    If Err.Number <> 0 Then
                        On Error GoTo 0
                        ws.Cells(debugRow, 7).value = "地区: " & currentRegion & ", 警告：月份转换失败 - " & m
                        debugRow = debugRow + 1
                        GoTo ContinueLoop
                    End If
                    On Error GoTo 0
                    
                    Dim monthNum As Integer
                    For monthNum = startMonth To endMonth
                        On Error Resume Next
                        expandedMonths.Add CStr(monthNum), CStr(monthNum)
                        On Error GoTo 0
                    Next monthNum
                Else
                    ' 处理单个月份
                    Dim singleMonth As String
                    singleMonth = Trim(Replace(CStr(m), "月", ""))
                    On Error Resume Next
                    expandedMonths.Add singleMonth, singleMonth
                    On Error GoTo 0
                End If
ContinueLoop:
            Next m
            
            ' 处理时间段
            Dim k As Long
            For k = 0 To arrayLength - 1 Step 2
                If k + 1 <= arrayLength Then
                    ' 记录当前处理的时间对
                    ws.Cells(debugRow, 7).value = "地区: " & currentRegion & ", 处理时间对: " & timePairs(k) & " - " & timePairs(k + 1)
                    debugRow = debugRow + 1
                    
                    ' 为每个月份创建记录
                    Dim month As Variant
                    For Each month In expandedMonths
                        ' 创建唯一标识符
                        Dim entryKey As String
                        entryKey = CStr(month) & "_" & timeType
                        
                        ' 检查是否已处理过该条目
                        Dim shouldProcess As Boolean
                        shouldProcess = True
                        
                        ' 如果是已处理的条目，检查是否需要更新
                        On Error Resume Next
                        Dim existingEntry As String
                        existingEntry = processedEntries(entryKey)
                        
                        If Err.Number = 0 Then
                            ' 已存在的条目，检查是否需要更新
                            ' 对于低谷和深谷时段，我们总是需要处理
                            If timeType = "低谷" Or timeType = "深谷" Then
                                shouldProcess = True
                            End If
                        Else
                            ' 新条目，添加到处理集合
                            processedEntries.Add entryKey, entryKey
                            shouldProcess = True
                        End If
                        On Error GoTo 0
                        
                        If shouldProcess Then
                            ' 确保时间格式正确
                            Dim startTime As String, endTime As String
                            startTime = timePairs(k)
                            endTime = timePairs(k + 1)
                            
                            ' 如果时间只包含小时数，添加":00"
                            If IsNumeric(startTime) Then startTime = startTime & ":00"
                            If IsNumeric(endTime) Then endTime = endTime & ":00"
                            
                            ' 记录写入前的值
                            debugInfo = "地区: " & currentRegion & ", 准备写入: " & vbCrLf & _
                                      "月份=" & month & vbCrLf & _
                                      "时段类型=" & timeType & vbCrLf & _
                                      "开始时间=" & startTime & vbCrLf & _
                                      "结束时间=" & endTime
                            ws.Cells(debugRow, 7).value = debugInfo
                            debugRow = debugRow + 1
                            
                            ' 写入值到各列
                            ws.Cells(currentRow, 1).value = currentRegion        ' 地区
                            ws.Cells(currentRow, 2).value = season              ' 季节
                            ws.Cells(currentRow, 3).value = month & "月"        ' 月份
                            ws.Cells(currentRow, 4).value = timeType           ' 时段类型
                            ws.Cells(currentRow, 5).value = startTime          ' 开始时间
                            ws.Cells(currentRow, 6).value = endTime            ' 结束时间
                            
                            ' 记录写入后的值
                            debugInfo = "地区: " & currentRegion & ", 写入完成: 行=" & currentRow & vbCrLf & _
                                      "实际值: " & ws.Cells(currentRow, 4).value & " - " & ws.Cells(currentRow, 5).value & " - " & ws.Cells(currentRow, 6).value
                            ws.Cells(debugRow, 7).value = debugInfo
                            debugRow = debugRow + 1
                            
                            currentRow = currentRow + 1
                        End If
                    Next month
                End If
            Next k
        End If
    End If
End Sub

Sub ParseTimeText()
    Dim ws As Worksheet
    Dim wsSource As Worksheet
    Dim inputText As String
    Dim lines() As String
    Dim currentRow As Long
    Dim debugRow As Long
    Dim currentSeason As String
    Dim currentMonths As String
    Dim line As String
    Dim i As Long
    Dim timeType As String
    Dim specificMonths As String
    Dim lastRow As Long
    Dim inputChoice As VbMsgBoxResult
    Dim continueInput As Boolean
    Dim processedEntries As Collection
    Dim currentRegion As String ' 新增：当前地区变量
    
    ' 检查是否存在"解析结果"工作表
    On Error Resume Next
    Set ws = ThisWorkbook.Worksheets("解析结果")
    If ws Is Nothing Then
        Set ws = ThisWorkbook.Worksheets.Add
        ws.Name = "解析结果"
    End If
    On Error GoTo 0
    

    ' 如果工作表已存在数据，找到最后一行
    currentRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).row
    If currentRow = 1 Then
        ' 工作表为空，清除内容并设置表头
        ws.Cells.Clear
        ws.Cells(1, 1).value = "地区" ' 新增：地区列
        ws.Cells(1, 2).value = "季节"
        ws.Cells(1, 3).value = "月份"
        ws.Cells(1, 4).value = "时段类型"
        ws.Cells(1, 5).value = "开始时间"
        ws.Cells(1, 6).value = "结束时间"
        ws.Cells(1, 7).value = "Debug Info"
           
    ' 设置表头格式
    With ws.Range("A1:G1")
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Interior.Color = RGB(217, 217, 217)
        .Borders.LineStyle = xlContinuous
    End With
    
    ' 设置整个表格的格式
    With ws.Columns("A:G")
        .WrapText = False  ' 禁用自动换行
        .AutoFit          ' 自动调整列宽
        .HorizontalAlignment = xlLeft
    End With
    
        currentRow = 2
    Else
        ' 工作表已有数据，从最后一行继续
        currentRow = currentRow + 1
    End If
    
    debugRow = ws.Cells(ws.Rows.Count, 7).End(xlUp).row + 1
    Set processedEntries = New Collection
    
    ' 询问用户选择输入方式
    inputChoice = MsgBox("是否从'分时电价政策表'工作表读取数据？" & vbCrLf & _
                        "选择'是'从工作表读取" & vbCrLf & _
                        "选择'否'手动输入文本", _
                        vbYesNoCancel + vbQuestion, "选择输入方式")
    
    If inputChoice = vbCancel Then
        Exit Sub
    ElseIf inputChoice = vbYes Then
        ' 从工作表读取数据
        ' 检查是否存在"分时电价政策表"工作表
        On Error Resume Next
        Set wsSource = ThisWorkbook.Worksheets("分时电价政策表")
        If wsSource Is Nothing Then
            MsgBox "未找到'分时电价政策表'工作表！请确保该工作表存在，并在A列填写地区，B列第二行开始填写文本。", vbExclamation
            Exit Sub
        End If
        On Error GoTo 0
        
        ' 获取源数据的最后一行
        lastRow = wsSource.Cells(wsSource.Rows.Count, "B").End(xlUp).row
        If lastRow < 2 Then
            MsgBox "在'分时电价政策表'工作表的B列未找到数据！", vbExclamation
            Exit Sub
        End If
        
        ' 记录开始处理
        ws.Cells(debugRow, 7).value = "开始处理'分时电价政策表'工作表的数据"
        debugRow = debugRow + 1
        
        ' 处理每一行文本
        For i = 2 To lastRow
            line = Trim(wsSource.Cells(i, "B").value)
            currentRegion = Trim(wsSource.Cells(i, "A").value) ' 获取当前地区
            
            ' 记录原始行内容
            If line <> "" Then
                ws.Cells(debugRow, 7).value = "地区: " & currentRegion & " 行 " & i & ": " & line
                debugRow = debugRow + 1
                
                Call ProcessTextLine(line, currentSeason, currentMonths, specificMonths, timeType, ws, debugRow, currentRow, processedEntries, currentRegion)
            End If
        Next i
    Else
        ' 手动输入文本
        Do
            ' 获取地区名称
            currentRegion = InputBox("请输入地区名称：", "地区信息")
            If currentRegion = "" Then Exit Do
            
            ' 获取用户输入的文本
            inputText = InputBox("请粘贴" & currentRegion & "的分时电价政策文本（如果已完成所有粘贴，请直接点击取消按钮）：", "文本解析")
            
            If inputText = "" Then
                Exit Do
            End If
            
            ' 预处理文本
            inputText = Replace(inputText, vbCrLf, vbLf)
            inputText = Replace(inputText, vbCr, vbLf)
            inputText = Replace(inputText, "，", "、")
            inputText = Replace(inputText, ",", "、")
            
            ' 标准化换行符
            While InStr(inputText, vbLf & vbLf) > 0
                inputText = Replace(inputText, vbLf & vbLf, vbLf)
            Wend
            
            ' 按行分割文本
            lines = Split(inputText, vbLf)
            
            ' 记录原始文本
            ws.Cells(debugRow, 7).value = "新输入文本块开始 - 地区: " & currentRegion
            debugRow = debugRow + 1
            
            ' 处理每一行
            For i = 0 To UBound(lines)
                line = Trim(lines(i))
                
                ' 记录原始行内容
                If line <> "" Then
                    Call ProcessTextLine(line, currentSeason, currentMonths, specificMonths, timeType, ws, debugRow, currentRow, processedEntries, currentRegion)
                End If
            Next i
            
            ws.Cells(debugRow, 7).value = "当前文本块处理完成"
            debugRow = debugRow + 1
            
            ' 询问是否继续输入
            continueInput = MsgBox("是否还有更多地区的文本需要粘贴？", vbYesNo + vbQuestion, "继续输入") = vbYes
        Loop While continueInput
    End If
    
    ' 自动调整列宽
    ws.Columns("A:G").AutoFit
    ' 最后再次确保格式正确
    With ws.Columns("A:G")
        .WrapText = False  ' 禁用自动换行
        .AutoFit          ' 自动调整列宽
    End With
    
    MsgBox "文本解析完成！结果已保存在'解析结果'工作表中。请运行ConvertToTimeConfig更新时段表。", vbInformation
End Sub

Private Sub ProcessTextLine(ByVal line As String, ByRef currentSeason As String, ByRef currentMonths As String, _
                          ByRef specificMonths As String, ByRef timeType As String, _
                          ByVal ws As Worksheet, ByRef debugRow As Long, ByRef currentRow As Long, _
                          ByVal processedEntries As Collection, ByVal currentRegion As String)
    ' 记录调试信息
    ws.Cells(debugRow, 7).value = "正在处理地区 " & currentRegion & " 的行: " & line
    debugRow = debugRow + 1
    
    ' 检查是否是季节行
    If InStr(line, "季") > 0 Then
        ' 提取月份信息
        specificMonths = ExtractMonths(line)
        
        If InStr(line, "春季") > 0 Then
            currentSeason = "春季"
            If specificMonths = "" Then specificMonths = "3、4、5、6"
            ws.Cells(debugRow, 7).value = "地区: " & currentRegion & ", 季节: 春季, 月份: " & specificMonths
            debugRow = debugRow + 1
        ElseIf InStr(line, "夏季") > 0 Then
            currentSeason = "夏季"
            ' 不再设置默认月份，使用实际提取的月份
            ws.Cells(debugRow, 7).value = "地区: " & currentRegion & ", 季节: 夏季, 月份: " & specificMonths
            debugRow = debugRow + 1
        ElseIf InStr(line, "秋季") > 0 Then
            currentSeason = "秋季"
            If specificMonths = "" Then specificMonths = "10、11"
            ws.Cells(debugRow, 7).value = "地区: " & currentRegion & ", 季节: 秋季, 月份: " & specificMonths
            debugRow = debugRow + 1
        ElseIf InStr(line, "冬季") > 0 Then
            currentSeason = "冬季"
            If specificMonths = "" Then specificMonths = "12、1、2"
            ws.Cells(debugRow, 7).value = "地区: " & currentRegion & ", 季节: 冬季, 月份: " & specificMonths
            debugRow = debugRow + 1
        End If
        currentMonths = specificMonths
    End If
    
    ' 检查是否包含月份信息（非季节行）
    If InStr(line, "月份") > 0 Then
        ' 提取月份信息
        Dim monthPart As String
        monthPart = Trim(Mid(line, InStr(line, "月份") + 2))
        monthPart = Replace(monthPart, "月", "")
        monthPart = Replace(monthPart, "。", "")
        monthPart = Replace(monthPart, "，", "")
        monthPart = Replace(monthPart, ",", "")
        monthPart = Replace(monthPart, "：", "")
        monthPart = Replace(monthPart, ":", "")
        monthPart = Trim(monthPart)
        
        ' 处理月份范围
        If InStr(monthPart, "-") > 0 Then
            Dim monthRange() As String
            monthRange = Split(monthPart, "-")
            Dim startMonth As Long, endMonth As Long
            startMonth = CLng(Trim(monthRange(0)))
            endMonth = CLng(Trim(monthRange(1)))
            
            ' 构建月份列表
            Dim monthList As String
            monthList = ""
            Dim m As Long
            For m = startMonth To endMonth
                If monthList <> "" Then monthList = monthList & "、"
                monthList = monthList & CStr(m)
            Next m
            currentMonths = monthList
            specificMonths = monthList
            
            ws.Cells(debugRow, 7).value = "地区: " & currentRegion & ", 提取到月份范围: " & startMonth & "-" & endMonth & " => " & currentMonths
            debugRow = debugRow + 1
        End If
    End If
    
    ' 检查是否是时段行
    If InStr(line, "时段") > 0 Or InStr(line, "平段") > 0 Then
        ' 获取时段类型
        timeType = ""
        If InStr(line, "尖峰") > 0 Then
            timeType = "尖峰"
        ElseIf InStr(line, "高峰") > 0 Then
            timeType = "高峰"
        ElseIf InStr(line, "平时") > 0 Or InStr(line, "平段") > 0 Then
            timeType = "平段"
        ElseIf InStr(line, "深谷") > 0 Then
            timeType = "深谷"
        ElseIf InStr(line, "低谷") > 0 Then
            timeType = "低谷"
        End If
        
        ' 处理时段信息
        If timeType <> "" Then
            ' 如果没有设置月份，使用当前月份
            If currentMonths = "" Then
                currentMonths = "1、2、3、4、5、6、7、8、9、10、11、12"
                ws.Cells(debugRow, 7).value = "地区: " & currentRegion & ", 使用默认月份: " & currentMonths
                debugRow = debugRow + 1
            End If
            
            ws.Cells(debugRow, 7).value = "地区: " & currentRegion & ", 处理时段: " & timeType & " - " & line & " (月份: " & currentMonths & ")"
            debugRow = debugRow + 1
            
            Call ProcessTimeSlotWithDuplication(ws, line, currentSeason, currentMonths, timeType, currentRow, debugRow, processedEntries, currentRegion)
        End If
    End If
End Sub

Sub ConvertToTimeConfig()
    Dim wsSource As Worksheet, wsSingle As Worksheet, wsMulti As Worksheet
    Dim lastRow As Long, i As Long, currentRow As Long
    Dim monthNum As Integer, timeValue As Integer
    Dim startTime As String, endTime As String
    Dim startHour As Double, endHour As Double
    Dim debugInfo As String
    Dim currentRegion As String
    Dim regions As Collection
    Set regions = New Collection ' 添加这行来初始化Collection
    
    ' 获取工作表
    On Error Resume Next
    Set wsSource = ThisWorkbook.Worksheets("解析结果")
    
    ' 创建或获取单个地区时段表
    Set wsSingle = ThisWorkbook.Worksheets("单个地区时段表")
    If wsSingle Is Nothing Then
        Set wsSingle = ThisWorkbook.Worksheets.Add
        wsSingle.Name = "单个地区时段表"
    End If
    
    ' 创建或获取多个地区时段表
    Set wsMulti = ThisWorkbook.Worksheets("多个地区时段表")
    If wsMulti Is Nothing Then
        Set wsMulti = ThisWorkbook.Worksheets.Add
        wsMulti.Name = "多个地区时段表"
    End If
    
    ' 检查工作表是否存在
    If wsSource Is Nothing Then
        MsgBox "未找到'解析结果'工作表！", vbExclamation
        Exit Sub
    End If
    On Error GoTo 0
    
    ' 获取最后一行
    With wsSource
        lastRow = .Cells(.Rows.Count, "A").End(xlUp).row
    End With
    
    ' 检查是否有数据
    If lastRow <= 1 Then
        MsgBox "解析结果表中没有数据！", vbExclamation
        Exit Sub
    End If
    
    ' 收集所有不同的地区
    On Error Resume Next
    For i = 2 To lastRow
        currentRegion = Trim(wsSource.Cells(i, 1).value)
        If currentRegion <> "" Then
            regions.Add currentRegion, currentRegion
        End If
    Next i
    On Error GoTo 0
    
    ' 创建单个地区时段表模板
    Call CreateSingleRegionTemplate(wsSingle)
    
    ' 创建多个地区时段表模板
    Call CreateMultiRegionTemplate(wsMulti)
    
    ' 处理第一个地区的数据（单个地区时段表）
    If regions.Count > 0 Then
        Call UpdateSingleRegionData(wsSingle, wsSource, CStr(regions(1)), lastRow)
    End If
    
    ' 处理所有地区的数据（多个地区时段表）
    currentRow = 2 ' 从第二行开始写入数据
    Dim region As Variant
    For Each region In regions
        ' 处理每个月份
        For monthNum = 1 To 12
            ' 在时段表中写入地区和月份
            wsMulti.Cells(currentRow, 1).value = region
            wsMulti.Cells(currentRow, 2).value = monthNum & "月"
            
            ' 创建一个数组来存储该月的时段配置
            Dim timeConfig(0 To 23) As Integer
            
            ' 处理所有时段类型
            Dim timeTypes As Variant
            timeTypes = Array("尖峰", "高峰", "平段", "低谷", "深谷")
            Dim timeType As Variant
            
            For Each timeType In timeTypes
                For i = 2 To lastRow
                    If Trim(wsSource.Cells(i, 1).value) = CStr(region) And _
                       CInt(Replace(wsSource.Cells(i, 3).value, "月", "")) = monthNum And _
                       Trim(wsSource.Cells(i, 4).value) = CStr(timeType) Then
                        Call ProcessTimeSlotForMonth(wsSource, i, timeConfig, monthNum)
                    End If
                Next i
            Next timeType
            
            ' 将时段配置写入工作表
            For i = 0 To 23
                If timeConfig(i) <> 0 Then
                    wsMulti.Cells(currentRow, i + 3).value = timeConfig(i)
                End If
            Next i
            
            ' 更新颜色
            Call UpdateConfigForRow(wsMulti, currentRow)
            
            currentRow = currentRow + 1
        Next monthNum
    Next region
    
    ' 自动调整列宽
    wsMulti.Columns.AutoFit
    
    ' 显示处理结果
    Dim processedRegions As String
    processedRegions = ""
    For Each region In regions
        If processedRegions <> "" Then processedRegions = processedRegions & ", "
        processedRegions = processedRegions & CStr(region)
    Next region
    
    If processedRegions = "" Then
        MsgBox "未找到有效的地区数据！", vbExclamation
    Else
        MsgBox "已创建时段表：" & vbCrLf & _
               "1. 单个地区时段表 - 使用'选择地区'按钮切换显示不同地区" & vbCrLf & _
               "2. 多个地区时段表 - 使用A列筛选查看不同地区" & vbCrLf & vbCrLf & _
               "可用地区：" & processedRegions, vbInformation
    End If
End Sub

Sub CreateSingleRegionTemplate(ws As Worksheet)
    ' 清除工作表内容
    ws.Cells.Clear
    
    ' 设置列标题（小时）
    Dim i As Integer
    For i = 0 To 23
        ws.Cells(1, i + 2).value = "'" & i & "-" & (i + 1)
        ws.Cells(1, i + 2).HorizontalAlignment = xlCenter
        ' 设置小时列的宽度
        ws.Columns(i + 2).ColumnWidth = 5
    Next i
    
    ' 设置月份
    For i = 1 To 12
        ws.Cells(i + 1, 1).value = i & "月"
    Next i
    
    ' 设置A列宽度
    ws.Columns("A").ColumnWidth = 6
    
    ' 添加配置说明
    ws.Cells(15, 1).value = "时段状态配置（1=尖峰,2=高峰,3=平段,4=低谷,5=深谷）："
    
    ' 复制列标题到配置区域
    For i = 0 To 23
        ws.Cells(16, i + 2).value = "'" & i & "-" & (i + 1)
        ws.Cells(16, i + 2).HorizontalAlignment = xlCenter
    Next i
    
    ' 设置月份（配置区域）
    For i = 1 To 12
        ws.Cells(i + 16, 1).value = i & "月"
    Next i
    
    ' 设置表格边框
    With ws.Range(ws.Cells(1, 1), ws.Cells(13, 25))
        .Borders.LineStyle = xlContinuous
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
    End With
    With ws.Range(ws.Cells(16, 1), ws.Cells(28, 25))
        .Borders.LineStyle = xlContinuous
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
    End With
    
    ' 设置标题行格式
    With ws.Range("A1:Y1")
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .Interior.Color = RGB(217, 217, 217)  ' 浅灰色背景
    End With
    With ws.Range("A16:Y16")
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .Interior.Color = RGB(217, 217, 217)  ' 浅灰色背景
    End With
    
    ' 修改添加选择地区按钮的位置
    Dim btn As Button
    Set btn = ws.Buttons.Add(ws.Range("AA2").Left, ws.Range("AA2").Top, 80, 25)
    With btn
        .OnAction = "FilterByRegion"
        .Caption = "选择地区"
    End With
    
    ' 设置默认行高
    ws.Rows.RowHeight = 20
End Sub

Sub CreateMultiRegionTemplate(ws As Worksheet)
    ' 清除工作表内容
    ws.Cells.Clear
    
    ' 设置地区列标题
    ws.Cells(1, 1).value = "地区"
    
    ' 设置月份列标题
    ws.Cells(1, 2).value = "月份"
    
    ' 设置列标题（小时）
    Dim i As Integer
    For i = 0 To 23
        ws.Cells(1, i + 3).value = "'" & i & "-" & (i + 1)
        ws.Cells(1, i + 3).HorizontalAlignment = xlCenter
        ' 设置小时列的宽度
        ws.Columns(i + 3).ColumnWidth = 5
    Next i
    
    ' 设置A列和B列宽度
    ws.Columns("A").ColumnWidth = 8
    ws.Columns("B").ColumnWidth = 6
    
    ' 设置标题行格式
    With ws.Range("A1:Z1")
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .Interior.Color = RGB(217, 217, 217)  ' 浅灰色背景
    End With
    
    ' 添加筛选功能
    ws.Range("A1").AutoFilter
    
    ' 设置默认行高
    ws.Rows.RowHeight = 20
End Sub

Sub UpdateSingleRegionData(ws As Worksheet, wsSource As Worksheet, region As String, lastRow As Long)
    Dim i As Long, monthNum As Integer
    
    ' 清除现有数据
    ws.Range("B2:Y13").ClearContents
    ws.Range("B17:Y28").ClearContents
    ws.Range("B2:Y13").Interior.ColorIndex = xlNone
    
    ' 添加地区标题
    ws.Cells(1, 1).value = region
    
    For monthNum = 1 To 12
        ' 创建一个数组来存储该月的时段配置
        Dim timeConfig(0 To 23) As Integer
        
        ' 处理所有时段类型
        For i = 2 To lastRow
            If Trim(wsSource.Cells(i, 1).value) = region And _
               CInt(Replace(wsSource.Cells(i, 3).value, "月", "")) = monthNum Then
                
                ' 获取时段类型
                Dim timeValue As Integer
                Select Case Trim(wsSource.Cells(i, 4).value)
                    Case "尖峰": timeValue = PEAK
                    Case "高峰": timeValue = HIGH
                    Case "平段": timeValue = NORMAL
                    Case "低谷": timeValue = LOW
                    Case "深谷": timeValue = DEEP_LOW
                    Case Else: timeValue = 0
                End Select
                
                ' 获取时间
                Dim startTime As String, endTime As String
                startTime = wsSource.Cells(i, 5).value
                endTime = wsSource.Cells(i, 6).value
                
                ' 处理时间值
                Dim startHour As Double, endHour As Double
                If InStr(startTime, ":") > 0 Then
                    startHour = Val(Split(startTime, ":")(0))
                ElseIf IsNumeric(startTime) Then
                    startHour = Val(startTime)
                End If
                
                If InStr(endTime, ":") > 0 Then
                    endHour = Val(Split(endTime, ":")(0))
                ElseIf IsNumeric(endTime) Then
                    endHour = Val(endTime)
                End If
                
                ' 确保时间在有效范围内
                If startHour < 0 Then startHour = 0
                If startHour >= 24 Then startHour = startHour - 24
                If endHour <= 0 Then endHour = 24
                If endHour > 24 Then endHour = 24
                
                ' 处理跨天的情况
                If endHour < startHour Then
                    endHour = endHour + 24
                End If
                
                ' 填充时段到数组
                Dim hour As Double
                For hour = startHour To endHour - 1 Step 1
                    Dim targetHour As Integer
                    targetHour = Int(hour)
                    If targetHour >= 24 Then
                        targetHour = targetHour - 24
                    End If
                    
                    If targetHour >= 0 And targetHour <= 23 Then
                        timeConfig(targetHour) = timeValue
                    End If
                Next hour
            End If
        Next i
        
        ' 将时段配置写入工作表
        For i = 0 To 23
            If timeConfig(i) <> 0 Then
                ' 写入颜色时段图
                Select Case timeConfig(i)
                    Case PEAK ' 尖峰
                        ws.Cells(monthNum + 1, i + 2).Interior.Color = RGB(255, 192, 0)  ' 橙色
                    Case HIGH ' 高峰
                        ws.Cells(monthNum + 1, i + 2).Interior.Color = RGB(255, 192, 203)  ' 粉红色
                    Case NORMAL ' 平段
                        ws.Cells(monthNum + 1, i + 2).Interior.Color = RGB(189, 215, 238) ' 浅蓝色
                    Case LOW ' 低谷
                        ws.Cells(monthNum + 1, i + 2).Interior.Color = RGB(198, 239, 206) ' 浅绿色
                    Case DEEP_LOW ' 深谷
                        ws.Cells(monthNum + 1, i + 2).Interior.Color = RGB(0, 112, 192)   ' 深蓝色
                End Select
                
                ' 写入数字时段表
                ws.Cells(monthNum + 16, i + 2).value = timeConfig(i)
            End If
        Next i
    Next monthNum
End Sub

' 修改地区选择功能的宏，使用UserForm并更新单个地区时段表
Sub FilterByRegion()
    ' 创建并显示地区选择窗体
    RegionSelectorForm.Show
End Sub

' 为特定行更新配置的新函数
Sub UpdateConfigForRow(ws As Worksheet, rowNum As Long)
    Dim j As Integer
    For j = 0 To 23
        If Not IsEmpty(ws.Cells(rowNum, j + 3)) Then
            Select Case ws.Cells(rowNum, j + 3).value
                Case PEAK ' 尖峰
                    ws.Cells(rowNum, j + 3).Interior.Color = RGB(255, 192, 0)  ' 橙色
                Case HIGH ' 高峰
                    ws.Cells(rowNum, j + 3).Interior.Color = RGB(255, 192, 203)  ' 粉红色
                Case NORMAL ' 平段
                    ws.Cells(rowNum, j + 3).Interior.Color = RGB(189, 215, 238) ' 浅蓝色
                Case LOW ' 低谷
                    ws.Cells(rowNum, j + 3).Interior.Color = RGB(198, 239, 206) ' 浅绿色
                Case DEEP_LOW ' 深谷
                    ws.Cells(rowNum, j + 3).Interior.Color = RGB(0, 112, 192)   ' 深蓝色
            End Select
        End If
    Next j
End Sub

' 处理时段的函数
Private Sub ProcessTimeSlotForMonth(ByVal wsSource As Worksheet, ByVal rowIndex As Long, _
                                  ByRef timeConfig() As Integer, ByVal monthNum As Long)
    Dim timeValue As Integer
    Dim startTime As String, endTime As String
    Dim startHour As Double, endHour As Double
    
    ' 获取时段类型
    Select Case Trim(wsSource.Cells(rowIndex, 4).value)
        Case "尖峰": timeValue = PEAK
        Case "高峰": timeValue = HIGH
        Case "平段": timeValue = NORMAL
        Case "低谷": timeValue = LOW
        Case "深谷": timeValue = DEEP_LOW
        Case Else: timeValue = 0
    End Select
    
    ' 获取时间
    Dim startCell As Range, endCell As Range
    Set startCell = wsSource.Cells(rowIndex, 5)
    Set endCell = wsSource.Cells(rowIndex, 6)
    
    ' 处理时间值
    If startCell.text Like "*:*" Then
        startTime = startCell.text
        startHour = Val(Split(startTime, ":")(0))
    ElseIf IsNumeric(startCell.value) Then
        startHour = startCell.value * 24
    End If
    
    If endCell.text Like "*:*" Then
        endTime = endCell.text
        endHour = Val(Split(endTime, ":")(0))
    ElseIf IsNumeric(endCell.value) Then
        endHour = endCell.value * 24
    End If
    
    ' 确保时间在有效范围内
    If startHour < 0 Then startHour = 0
    If startHour >= 24 Then startHour = startHour - 24
    If endHour <= 0 Then endHour = 24
    If endHour > 24 Then endHour = 24
    
    ' 处理跨天的情况
    If endHour < startHour Then
        endHour = endHour + 24
    End If
    
    ' 填充时段到数组
    Dim j As Double
    For j = startHour To endHour - 1 Step 1
        ' 处理跨天情况
        Dim targetHour As Integer
        targetHour = Int(j)
        If targetHour >= 24 Then
            targetHour = targetHour - 24
        End If
        
        If targetHour >= 0 And targetHour <= 23 Then
            ' 只有当新的时段类型优先级更高时才覆盖
            If timeConfig(targetHour) = 0 Or timeValue < timeConfig(targetHour) Then
                timeConfig(targetHour) = timeValue
            End If
        End If
    Next j
End Sub














































